package wkb

import (
	"bytes"
	"reflect"
	"testing"
)

type testCase struct {
	s    string
	want Geom
}

func testDecode(t *testing.T, tc testCase) {
	r := bytes.NewBufferString(tc.s)
	if got, err := Decode(r); !reflect.DeepEqual(got, tc.want) || err != nil {
		t.Errorf("Decode(%q) == %q, %q, want %q, nil", tc.s, got, err, tc.want)
	}
}

func testDecodes(t *testing.T, tcs []testCase) {
	for _, tc := range tcs {
		testDecode(t, tc)
	}
}

func TestDecodePoint(t *testing.T) {
	testDecode(t, testCase{"\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@", Point{1, 2}})
}

func TestDecodePointZ(t *testing.T) {
	testDecode(t, testCase{"\x01\xe9\x03\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x08@", PointZ{1, 2, 3}})
}

func TestDecodePointM(t *testing.T) {
	testDecode(t, testCase{"\x01\xd1\x07\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x08@", PointM{1, 2, 3}})
}

func TestDecodePointZM(t *testing.T) {
	testDecode(t, testCase{"\x01\xb9\x0b\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x10@", PointZM{1, 2, 3, 4}})
}

func TestDecodeLineString(t *testing.T) {
	testDecode(t, testCase{"\x01\x02\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x10@", LineString{[]Point{{1, 2}, {3, 4}}}})
}

func TestDecodeLineStringZ(t *testing.T) {
	testDecode(t, testCase{"\x01\xea\x03\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x18@", LineStringZ{[]PointZ{{1, 2, 3}, {4, 5, 6}}}})
}

func TestDecodeLineStringM(t *testing.T) {
	testDecode(t, testCase{"\x01\xd2\x07\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x18@", LineStringM{[]PointM{{1, 2, 3}, {4, 5, 6}}}})
}

func TestDecodeLineStringZM(t *testing.T) {
	testDecode(t, testCase{"\x01\xba\x0b\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00 @", LineStringZM{[]PointZM{{1, 2, 3, 4}, {5, 6, 7, 8}}}})
}
