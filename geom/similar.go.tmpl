package geom

import (
	"math"
	"reflect"
)

func similar(a, b, e float64) bool {
	return math.Abs(a-b) < e
}{{range .Dims}}

func point{{.ZM}}Similar(p1, p2 Point{{.ZM}}, e float64) bool {
	return similar(p1.X, p2.X, e) && similar(p1.Y, p2.Y, e){{if .Z}} && similar(p1.Z, p2.Z, e){{end}}{{if .M}} && similar(p1.M, p2.M, e){{end}}
}

func point{{.ZM}}sSimilar(p1s, p2s []Point{{.ZM}}, e float64) bool {
	if len(p1s) != len(p2s) {
		return false
	}
	for i, n := 0, len(p1s); i < n; i++ {
		if !point{{.ZM}}Similar(p1s[i], p2s[i], e) {
			return false
		}
	}
	return true
}

func point{{.ZM}}ssSimilar(p1ss, p2ss [][]Point{{.ZM}}, e float64) bool {
	if len(p1ss) != len(p2ss) {
		return false
	}
	for i, n := 0, len(p1ss); i < n; i++ {
		if !point{{.ZM}}sSimilar(p1ss[i], p2ss[i], e) {
			return false
		}
	}
	return true
}{{end}}

func Similar(g1, g2 T, e float64) bool {
	if reflect.TypeOf(g1) != reflect.TypeOf(g2) {
		return false
	}
	switch g1.(type) {
{{range .Dims}}	case Point{{.ZM}}:
		return point{{.ZM}}Similar(g1.(Point{{.ZM}}), g2.(Point{{.ZM}}), e)
{{end}}{{range .Dims}}	case LineString{{.ZM}}:
		return point{{.ZM}}sSimilar(g1.(LineString{{.ZM}}).Points, g2.(LineString{{.ZM}}).Points, e)
{{end}}{{range .Dims}}	case Polygon{{.ZM}}:
		return point{{.ZM}}ssSimilar(g1.(Polygon{{.ZM}}).Rings, g2.(Polygon{{.ZM}}).Rings, e)
{{end}}{{range .Dims}}	case MultiPoint{{.ZM}}:
		return point{{.ZM}}sSimilar(g1.(MultiPoint{{.ZM}}).Points, g2.(MultiPoint{{.ZM}}).Points, e)
{{end}}	default:
		return false
	}
}
