package geom

import (
	"math"
)

type Bounds struct {
	Min, Max Point
}

func NewBounds() *Bounds {
	return &Bounds{Point{math.Inf(1), math.Inf(1)}, Point{math.Inf(-1), math.Inf(-1)}}
}{{range .Dims}}

func NewBoundsPoint{{.ZM}}(point{{.ZM}} Point{{.ZM}}) *Bounds {
	return &Bounds{Point{point{{.ZM}}.X, point{{.ZM}}.Y}, Point{point{{.ZM}}.X, point{{.ZM}}.Y}}
}{{end}}

func (b *Bounds) Copy() *Bounds {
	return &Bounds{Point{b.Min.X, b.Min.Y}, Point{b.Max.X, b.Max.Y}}
}

func (b *Bounds) Empty() bool {
	return b.Max.X < b.Min.X || b.Max.Y < b.Min.Y
}{{range .Dims}}

func (b *Bounds) ExtendPoint{{.ZM}}(point{{.ZM}} Point{{.ZM}}) *Bounds {
	b.Min.X = math.Min(b.Min.X, point{{.ZM}}.X)
	b.Min.Y = math.Min(b.Min.Y, point{{.ZM}}.Y)
	b.Max.X = math.Max(b.Max.X, point{{.ZM}}.X)
	b.Max.Y = math.Max(b.Max.Y, point{{.ZM}}.Y)
	return b
}{{end}}{{range .Dims}}

func (b *Bounds) ExtendPoint{{.ZM}}s(point{{.ZM}}s []Point{{.ZM}}) *Bounds {
	for _, point{{.ZM}} := range point{{.ZM}}s {
		b.ExtendPoint{{.ZM}}(point{{.ZM}})
	}
	return b
}{{end}}{{range .Dims}}

func (b *Bounds) ExtendPoint{{.ZM}}ss(point{{.ZM}}ss [][]Point{{.ZM}}) *Bounds {
	for _, point{{.ZM}}s := range point{{.ZM}}ss {
		b.ExtendPoint{{.ZM}}s(point{{.ZM}}s)
	}
	return b
}{{end}}

func (b1 *Bounds) Overlaps(b2 *Bounds) bool {
	return b1.Min.X <= b2.Max.X && b1.Min.Y <= b2.Max.Y && b1.Max.X >= b2.Min.X && b1.Max.Y >= b2.Min.Y
}
